version: '3.1'

#TODO: setup 4-tier networking (ingress (reverse-proxy), public-web (frontend), private-app (api), and private-db (datastores))

services:
  entertainment-cache:
    image: redis:alpine
    restart: always
  entertainment-db:
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: entertainment-api
      POSTGRES_USER: entertainment-api
      POSTGRES_PASSWORD: replaceme
  entertianment-migrations:
    build:
      dockerfile: docker/api-server/Dockerfile
      context: ..
      target: migrations
    depends_on:
      - entertainment-db 
  web-proxy:
    image: nginx
    volumes:
      - ./proxy-server/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "8080:80"
    restart: on-failure
    depends_on:
      - entertianment-api
      - web-server
  web-server:
    build: 
      dockerfile: docker/web-server/Dockerfile
      context: ..
      target: runtime
    restart: on-failure
  entertainment-api:
    build:
      dockerfile: docker/api-server/Dockerfile
      context: ..
      target: runtime
    restart: on-failure
    depends_on:
      - entertainment-cache
      - entertainment-db
      - entertainment-migrations